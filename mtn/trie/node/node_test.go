package node

import (
	"encoding/hex"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"

	"gomail/mtn/logger"
)

func TestDecodeNode(t *testing.T) {
	type args struct {
		hash []byte
		buf  []byte
	}
	tests := []struct {
		name    string
		args    args
		want    Node
		wantErr bool
	}{
		// TODO: Add test cases.
		{
			name: "Test 1",
			args: args{
				hash: []byte(""),
				buf: common.FromHex(
					"12c2040a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a20eeeae2329c18b56cb8d3bf14d5c215f265ba5e56d08ee6d31f625b4bc9bfc6210a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a2000000000000000000000000000000000000000000000000000000000000000000a200000000000000000000000000000000000000000000000000000000000000000",
				),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := DecodeNode(tt.args.hash, tt.args.buf)
			logger.Info("got: %v", got, err)
		})
	}
}

func TestHashEmptyFullNode(t *testing.T) {
	fullNode := &FullNode{}
	bData, _ := fullNode.Marshal()
	logger.Info(hex.EncodeToString(bData))
	logger.Info(crypto.Keccak256Hash(bData))
}
