package mvm

import (
	"reflect"
	"testing"

	"github.com/ethereum/go-ethereum/common"
)

func TestWrapExtensionBlst(t *testing.T) {
	type args struct {
		data []byte
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		// TODO: Add test cases.
		{
			name: "Test WrapExtensionBlst verify sign",
			args: args{
				data: common.FromHex(
					"0xee57fa59000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000030a2702ce6bbfb2e013935781bac50a0e168732bd957861e6fbf185d688c82ade34c9f33fead179decb5953b3382b061df000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060a507c03ab7ebb69a4b3adc22a0347bb2466788e6a3baa174a62bd74cdff60dfd6d6ba9ec6237098f1ceef6013bfeff1d0c8be716266710e1493c422293a676e7f168007324a23435d4590896f97f8e3686cf0c280240b9406800c1cec6bafb5d00000000000000000000000000000000000000000000000000000000000000201111111111111111111111111111111111111111111111111111111111111111",
				),
			},
			want: common.FromHex("000000000000000000000000000000000000000000000000000000000000001"),
		},
		{
			name: "Test WrapExtensionBlst verify agg sign",
			args: args{
				data: common.FromHex(
					"0xfc65c51d0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000030a2702ce6bbfb2e013935781bac50a0e168732bd957861e6fbf185d688c82ade34c9f33fead179decb5953b3382b061df00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003084260cdfc6e5ffe9c463212514193f2d5bd112d8e4868698d72cfb4cd003d749a01c0ec35fe729cc61e6301d816c4b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000308557a68f0640d4fcaea396973d5647dde58aec8a414e6f56ad594e9994eb05cd124646ff87f07c151e47dbf30395b396000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060b05f3be51a50463c504afb3363b65c7ec8b2e336806bf65f48716956fd0820c4d4f1803af342a57e82f9a2fb6a071f5b19ec03407046ebe4bb7045398d3f939f3c9d81f3df5a5076eb6118668624ed2d55e322493205ee29c4d95efa895b41f40000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000020111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000201111111111111111111111111111111111111111111111111111111111111111",
				),
			},
			want: common.FromHex("000000000000000000000000000000000000000000000000000000000000001"),
		},
		{
			name: "Test WrapExtensionBlst verify agg sign",
			args: args{
				data: common.FromHex(
					"0xfc65c51d0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000030a2702ce6bbfb2e013935781bac50a0e168732bd957861e6fbf185d688c82ade34c9f33fead179decb5953b3382b061df00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003084260cdfc6e5ffe9c463212514193f2d5bd112d8e4868698d72cfb4cd003d749a01c0ec35fe729cc61e6301d816c4b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000308557a68f0640d4fcaea396973d5647dde58aec8a414e6f56ad594e9994eb05cd124646ff87f07c151e47dbf30395b396000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060b05f3be51a50463c504afb3363b65c7ec8b2e336806bf65f48716956fd0820c4d4f1803af342a57e82f9a2fb6a071f5b19ec03407046ebe4bb7045398d3f939f3c9d81f3df5a5076eb6118668624ed2d55e322493205ee29c4d95efa895b41f50000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000020111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000201111111111111111111111111111111111111111111111111111111111111111",
				),
			},
			want: common.FromHex("000000000000000000000000000000000000000000000000000000000000000"),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := WrapExtensionBlst(tt.args.data); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("WrapExtensionBlst() = %v, want %v", got, tt.want)
			}
		})
	}
}
