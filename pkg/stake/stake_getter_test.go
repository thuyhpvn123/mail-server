package stake

import (
	"bytes"
	"encoding/hex"
	"math/big"
	"reflect"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"

	"gomail/pkg/logger"
	"gomail/pkg/mvm"
	"gomail/pkg/state"
	"gomail/pkg/test/mock"
	"gomail/types"
)

func TestStakeGetter_GetValidatorsWithStakeAmount(t *testing.T) {
	logger.SetFlag(logger.FLAG_DEBUG)
	type fields struct {
		stakeSmartContractAddress common.Address
		stakeSmartContractABI     abi.ABI
		accountStatesDB           mvm.AccountStateDB
		smartContractDB           mvm.SmartContractDB
	}
	testAccountStateDB, testSmartContractDB := initTestDB()
	tests := []struct {
		name    string
		fields  fields
		want    map[common.Address]*big.Int
		wantErr bool
	}{
		{
			name: "Test error",
			fields: fields{
				stakeSmartContractAddress: common.Address{},
				stakeSmartContractABI:     abi.ABI{},
				accountStatesDB:           nil,
				smartContractDB:           nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "Test success",
			fields: fields{
				stakeSmartContractAddress: common.Address{},
				stakeSmartContractABI:     initTestAbi(),
				accountStatesDB:           testAccountStateDB,
				smartContractDB:           testSmartContractDB,
			},
			want: map[common.Address]*big.Int{
				common.HexToAddress("0x5b38da6a701c568545dcfcb03fcb875f56beddc4"): big.NewInt(0),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := &StakeGetter{
				stakeSmartContractAddress: tt.fields.stakeSmartContractAddress,
				stakeSmartContractABI:     tt.fields.stakeSmartContractABI,
				accountStatesDB:           tt.fields.accountStatesDB,
				smartContractDB:           tt.fields.smartContractDB,
			}
			got, err := s.GetValidatorsWithStakeAmount()
			if (err != nil) != tt.wantErr {
				t.Errorf(
					"StakeGetter.GetValidatorsWithStakeAmount() error = %v, wantErr %v",
					err,
					tt.wantErr,
				)
				return
			}
			for k, v := range got {
				if v.Cmp(tt.want[k]) != 0 {
					t.Errorf(
						"StakeGetter.GetValidatorsWithStakeAmount() = %v, want %v",
						got,
						tt.want,
					)
				}
			}
		})
	}
}

func initTestAbi() abi.ABI {
	a, _ := abi.JSON(
		bytes.NewReader([]byte(`[
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "addr",
				"type": "address"
			}
		],
		"name": "getStakeInfo",
		"outputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"internalType": "address[]",
				"name": "childNodes",
				"type": "address[]"
			},
			{
				"internalType": "address[]",
				"name": "childExecuteMiners",
				"type": "address[]"
			},
			{
				"internalType": "address[]",
				"name": "childVerifyMiners",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getValidatorsWithStakeAmount",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "addresses",
				"type": "address[]"
			},
			{
				"internalType": "uint256[]",
				"name": "amounts",
				"type": "uint256[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]`)),
	)
	return a
}

func initTestDB() (mvm.AccountStateDB, mvm.SmartContractDB) {
	accountStateDB := &mock.TestMVMAccountStateDB{
		AccountStateFn: func(address common.Address) types.AccountState {
			st := state.NewAccountState(address)
			st.SetSmartContractState(
				state.NewSmartContractState(
					[]byte{},
					"storage",
					[]byte{1},
					common.FromHex("0x5b38da6a701c568545dcfcb03fcb875f56beddc4"),
					common.FromHex("0x5b38da6a701c568545dcfcb03fcb875f56beddc4"),
					nil, nil,
				),
			)
			return st
		},
	}
	smartContractDB := &mock.TestMVMSmartContractDB{
		CodeFn: func(address common.Address) []byte {
			return common.FromHex(
				"6080604052600436106100e85760003560e01c8063988d5e7a1161008a578063c345315311610059578063c34531531461028e578063c4d77090146102bf578063d3108019146102df578063f74e921f1461030257600080fd5b8063988d5e7a1461020e578063997453181461022e578063a29ed4001461024e578063b4a99a4e1461026e57600080fd5b8063513d2a99116100c6578063513d2a991461016557806363869a121461018557806364aa0c75146101e457806367e00372146101f957600080fd5b80632e949824146100ed578063384c63be146101185780634fd392831461012d575b600080fd5b3480156100f957600080fd5b50610102610317565b60405161010f9190611045565b60405180910390f35b34801561012457600080fd5b50610102610379565b34801561013957600080fd5b5061014d61014836600461105f565b6103d9565b6040516001600160a01b03909116815260200161010f565b34801561017157600080fd5b5060015461014d906001600160a01b031681565b34801561019157600080fd5b506101c56101a0366004611094565b600260205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520161010f565b3480156101f057600080fd5b50610102610403565b61020c610207366004611167565b610463565b005b34801561021a57600080fd5b5061020c610229366004611094565b610a45565b34801561023a57600080fd5b5061014d61024936600461105f565b610ab1565b34801561025a57600080fd5b5061014d61026936600461105f565b610ac1565b34801561027a57600080fd5b5060005461014d906001600160a01b031681565b34801561029a57600080fd5b506102ae6102a9366004611094565b610ad1565b60405161010f959493929190611226565b3480156102cb57600080fd5b5061014d6102da36600461105f565b610c69565b3480156102eb57600080fd5b506102f4610c79565b60405161010f92919061127f565b34801561030e57600080fd5b50610102610df2565b6060600480548060200260200160405190810160405280929190818152602001828054801561036f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610351575b5050505050905090565b6060600680548060200260200160405190810160405280929190818152602001828054801561036f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610351575050505050905090565b600681815481106103e957600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600580548060200260200160405190810160405280929190818152602001828054801561036f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610351575050505050905090565b6000546001600160a01b031633148061048657506001546001600160a01b031633145b6104d75760405162461bcd60e51b815260206004820152601b60248201527f4d757374206265206f776e6572206f7220636f6e74726f6c6c6572000000000060448201526064015b60405180910390fd5b60008660078111156104eb576104eb6112d6565b0361058b5760038054906104ff9086610e52565b1461053f5760405162461bcd60e51b815260206004820152601060248201526f56616c696461746f722065786973747360801b60448201526064016104ce565b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0386161790555b600486600781111561059f5761059f6112d6565b036106025760038054906105b39086610e52565b106105f75760405162461bcd60e51b815260206004820152601460248201527356616c696461746f72206e6f742065786973747360601b60448201526064016104ce565b610602600385610eb9565b6001866007811115610616576106166112d6565b036106b157600480549061062a9086610e52565b146106655760405162461bcd60e51b815260206004820152600b60248201526a4e6f64652065786973747360a81b60448201526064016104ce565b600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0386161790555b60058660078111156106c5576106c56112d6565b036107235760048054906106d99086610e52565b106107185760405162461bcd60e51b815260206004820152600f60248201526e4e6f6465206e6f742065786973747360881b60448201526064016104ce565b610723600485610eb9565b6003866007811115610737576107376112d6565b036107e457600580549061074b9086610e52565b146107985760405162461bcd60e51b815260206004820152601760248201527f657865637574654164647265737365732065786973747300000000000000000060448201526064016104ce565b600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0386161790555b60078660078111156107f8576107f86112d6565b0361086457600580549061080c9086610e52565b106108595760405162461bcd60e51b815260206004820152601b60248201527f65786563757465416464726573736573206e6f7420657869737473000000000060448201526064016104ce565b610864600585610eb9565b6002866007811115610878576108786112d6565b0361091a57600680549061088c9086610e52565b146108ce5760405162461bcd60e51b81526020600482015260126024820152717665726966794d696e65722065786973747360701b60448201526064016104ce565b600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0386161790555b600686600781111561092e5761092e6112d6565b036109935760068054906109429086610e52565b106109885760405162461bcd60e51b81526020600482015260166024820152757665726966794d696e6572206e6f742065786973747360501b60448201526064016104ce565b610993600685610eb9565b6001600160a01b03848116600090815260026020818152604090922080546001600160a01b03191693891693909317835534600184015585516109dc9390910191860190610f87565b506001600160a01b03841660009081526002602090815260409091208351610a0c92600390920191850190610f87565b506001600160a01b03841660009081526002602090815260409091208251610a3c92600490920191840190610f87565b50505050505050565b6000546001600160a01b03163314610a8f5760405162461bcd60e51b815260206004820152600d60248201526c26bab9ba1031329037bbb732b960991b60448201526064016104ce565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600381815481106103e957600080fd5b600581815481106103e957600080fd5b6001600160a01b038082166000908152600260208181526040928390208054600182015491909301805485518185028101850190965280865293909516949093606093849384939190830182828015610b5357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b35575b5050505050925060026000876001600160a01b03166001600160a01b03168152602001908152602001600020600301805480602002602001604051908101604052809291908181526020018280548015610bd657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bb8575b5050505050915060026000876001600160a01b03166001600160a01b03168152602001908152602001600020600401805480602002602001604051908101604052809291908181526020018280548015610c5957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c3b575b5050505050905091939590929450565b600481815481106103e957600080fd5b600354606090819067ffffffffffffffff811115610c9957610c996110af565b604051908082528060200260200182016040528015610cc2578160200160208202803683370190505b5060035490925067ffffffffffffffff811115610ce157610ce16110af565b604051908082528060200260200182016040528015610d0a578160200160208202803683370190505b50905060005b600354811015610ded5760038181548110610d2d57610d2d6112ec565b9060005260206000200160009054906101000a90046001600160a01b0316838281518110610d5d57610d5d6112ec565b60200260200101906001600160a01b031690816001600160a01b0316815250506002600060038381548110610d9457610d946112ec565b60009182526020808320909101546001600160a01b031683528201929092526040019020600101548251839083908110610dd057610dd06112ec565b602090810291909101015280610de581611318565b915050610d10565b509091565b6060600380548060200260200160405190810160405280929190818152602001828054801561036f576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610351575050505050905090565b6000805b8354811015610eae57826001600160a01b0316848281548110610e7b57610e7b6112ec565b6000918252602090912001546001600160a01b031603610e9c579050610eb3565b80610ea681611318565b915050610e56565b505081545b92915050565b6000610ec58383610e52565b8354909150811015610f825782548390610ee190600190611331565b81548110610ef157610ef16112ec565b9060005260206000200160009054906101000a90046001600160a01b0316838281548110610f2157610f216112ec565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082805480610f5f57610f5f611344565b600082815260209020810160001990810180546001600160a01b03191690550190555b505050565b828054828255906000526020600020908101928215610fdc579160200282015b82811115610fdc57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610fa7565b50610fe8929150610fec565b5090565b5b80821115610fe85760008155600101610fed565b600081518084526020808501945080840160005b8381101561103a5781516001600160a01b031687529582019590820190600101611015565b509495945050505050565b6020815260006110586020830184611001565b9392505050565b60006020828403121561107157600080fd5b5035919050565b80356001600160a01b038116811461108f57600080fd5b919050565b6000602082840312156110a657600080fd5b61105882611078565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126110d657600080fd5b8135602067ffffffffffffffff808311156110f3576110f36110af565b8260051b604051601f19603f83011681018181108482111715611118576111186110af565b60405293845285810183019383810192508785111561113657600080fd5b83870191505b8482101561115c5761114d82611078565b8352918301919083019061113c565b979650505050505050565b60008060008060008060c0878903121561118057600080fd5b86356008811061118f57600080fd5b955061119d60208801611078565b94506111ab60408801611078565b9350606087013567ffffffffffffffff808211156111c857600080fd5b6111d48a838b016110c5565b945060808901359150808211156111ea57600080fd5b6111f68a838b016110c5565b935060a089013591508082111561120c57600080fd5b5061121989828a016110c5565b9150509295509295509295565b60018060a01b038616815284602082015260a06040820152600061124d60a0830186611001565b828103606084015261125f8186611001565b905082810360808401526112738185611001565b98975050505050505050565b6040815260006112926040830185611001565b82810360208481019190915284518083528582019282019060005b818110156112c9578451835293830193918301916001016112ad565b5090979650505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161132a5761132a611302565b5060010190565b81810381811115610eb357610eb3611302565b634e487b7160e01b600052603160045260246000fdfea26469706673582212205fb58ce731918a8d688adb9233c12cba3176c3cdb43652535da1be5bca6d07bf64736f6c63430008130033",
			)
		},
		StorageValueFn: func(address common.Address, key []byte) []byte {
			mapStorage := map[string][]byte{
				"b314f101a00aa0d8cc6704cc6dd1e9dd7551ec98c9df52079c192c560ba66c4a": common.FromHex(
					"0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4",
				),
				"0000000000000000000000000000000000000000000000000000000000000003": common.FromHex(
					"0000000000000000000000000000000000000000000000000000000000000001",
				),
				"c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b": common.FromHex(
					"0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4",
				),
				"0000000000000000000000000000000000000000000000000000000000000000": common.FromHex(
					"0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4",
				),
			}
			rs := mapStorage[hex.EncodeToString(key)]
			b32Rs := make([]byte, 32)
			copy(b32Rs[32-len(rs):], rs)

			return b32Rs
		},
	}
	return accountStateDB, smartContractDB
}

func TestStakeGetter_GetStakeInfo(t *testing.T) {
	type fields struct {
		stakeSmartContractAddress common.Address
		stakeSmartContractABI     abi.ABI
		accountStatesDB           mvm.AccountStateDB
		smartContractDB           mvm.SmartContractDB
	}
	testAccountStateDB, testSmartContractDB := initTestDB()
	type args struct {
		nodeAddress common.Address
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    *StakeInfo
		wantErr bool
	}{
		{
			name: "Test error",
			fields: fields{
				stakeSmartContractAddress: common.Address{},
				stakeSmartContractABI:     abi.ABI{},
				accountStatesDB:           nil,
				smartContractDB:           nil,
			},
			args: args{
				nodeAddress: common.Address{},
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "Test empty",
			fields: fields{
				stakeSmartContractAddress: common.Address{},
				stakeSmartContractABI:     initTestAbi(),
				accountStatesDB:           testAccountStateDB,
				smartContractDB:           testSmartContractDB,
			},
			args: args{
				nodeAddress: common.Address{},
			},
			want: NewStakeInfo(
				common.Address{},
				big.NewInt(0),
				[]common.Address{},
				[]common.Address{},
				[]common.Address{},
			),
			wantErr: false,
		},
		{
			name: "Test success",
			fields: fields{
				stakeSmartContractAddress: common.Address{},
				stakeSmartContractABI:     initTestAbi(),
				accountStatesDB:           testAccountStateDB,
				smartContractDB:           testSmartContractDB,
			},
			args: args{
				nodeAddress: common.HexToAddress("0x5b38da6a701c568545dcfcb03fcb875f56beddc4"),
			},
			want: NewStakeInfo(
				common.HexToAddress("0x5b38da6a701c568545dcfcb03fcb875f56beddc4"),
				big.NewInt(0),
				[]common.Address{},
				[]common.Address{},
				[]common.Address{},
			),
			wantErr: false,
		},
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := &StakeGetter{
				stakeSmartContractAddress: tt.fields.stakeSmartContractAddress,
				stakeSmartContractABI:     tt.fields.stakeSmartContractABI,
				accountStatesDB:           tt.fields.accountStatesDB,
				smartContractDB:           tt.fields.smartContractDB,
			}
			got, err := s.GetStakeInfo(tt.args.nodeAddress)
			if (err != nil) != tt.wantErr {
				t.Errorf("StakeGetter.GetStakeInfo() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if tt.want != nil {
				if tt.want.Owner() != got.Owner() || tt.want.Amount().Cmp(got.Amount()) != 0 ||
					!reflect.DeepEqual(tt.want.ChildNodes(), got.ChildNodes()) ||
					!reflect.DeepEqual(tt.want.ChildExecuteMiners(), got.ChildExecuteMiners()) ||
					!reflect.DeepEqual(tt.want.ChildVerifyMiners(), got.ChildVerifyMiners()) {
					t.Errorf("StakeGetter.GetStakeInfo() = %v, want %v", got, tt.want)
				}
			}
		})
	}
}
